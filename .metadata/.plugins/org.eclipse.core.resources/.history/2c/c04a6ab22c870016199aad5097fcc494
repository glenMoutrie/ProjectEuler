package basicTools.Fraction;

import basicTools.GeneralCalculation;

public class IntegerFraction implements Comparable<IntegerFraction>{

	private int numerator;
	private int denominator;
	private double value;

	// Constructor
	public IntegerFraction(int numerator, int denominator) {
		this.numerator = numerator;
		this.denominator = denominator;
		calculateValue();
		
	}

	public void calculateValue() {
		this.value = ((double) this.numerator)/((double) this.denominator);
	}

	/*
	 * Basic Numerical Methods
	 */

	public IntegerFraction multiply(IntegerFraction x) {

		IntegerFraction update = new IntegerFraction(this.numerator*x.getNumerator(), 
				this.numerator*x.getDenominator());

		update.calculateValue();

		return(update);

	}

	public IntegerFraction add(IntegerFraction x) {

		int denominator = this.denominator*x.getDenominator();
		int numerator = (this.denominator*x.getNumerator()) + (x.getDenominator()*this.numerator);

		IntegerFraction update = new IntegerFraction(numerator, denominator);

		update.calculateValue();

		return(update);

	}

	public IntegerFraction add(int x) {

		IntegerFraction addition = new IntegerFraction(x, 1);

		return(this.add(addition));
	}

	public void invert() {

		// Switch the numerator and denominator
		int newDenominiator = this.numerator;
		this.numerator = this.denominator;
		this.denominator = newDenominiator;

		// Update the value
		calculateValue();
	}

	public int getDenominator() {
		return this.denominator;
	}

	public int getNumerator() {
		return this.numerator;
	}
	
	public double getValue() {
		return this.value;
	}

	public void print() {
		System.out.println(this.numerator);
		System.out.println("-------");
		System.out.println(this.denominator);
	}
	
	public void reduce() {
		
		int commonMultiple = GeneralCalculation.gcm(this.numerator, this.denominator);
		
		this.numerator = this.numerator/commonMultiple;
		this.denominator = this.denominator/commonMultiple;
		
	}

	@Override
	public int compareTo(IntegerFraction o) {
		
		boolean numeratorCheck = this.numerator == o.getNumerator();
		boolean denominatorCheck = this.denominator == o.getDenominator();
		
		if (numeratorCheck && denominatorCheck) {
			return 0;
		} else if (this.value > o.getValue()) {
			return 1;
		} else {
			return -1;
		}
		
	}
	
	@Override
	public boolean equals(Object obj) {
		if(!IntegerFraction.class.isAssignableFrom(obj)) {
			return false;
		} else {
			IntegerFraction compare = (IntegerFraction) obj;
			
			boolean numeratorCheck = this.numerator == obj.getNumerator();
			boolean denominatorCheck = this.denominator == obj.getDenominator();
			boolean valueCheck = this.value == obj.getValue();
			
			if(this.value == compare.value) {
				return(true);
			} else {
				return(false);
			}
		}
		
	}

}
