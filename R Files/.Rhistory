source('~/Documents/ProjectEuler/R Files/Inside circle.R', echo=TRUE)
source('~/Documents/ProjectEuler/R Files/Inside circle.R', echo=TRUE)
source('~/Documents/ProjectEuler/R Files/Inside circle.R', echo=TRUE)
source('~/Documents/ProjectEuler/R Files/Inside circle.R', echo=TRUE)
library(lineprof)
lineprof(insideCircle(input[[1]]))
lineprof(insideCircle(input[[1]]),torture = T)
profile <- lineprof(insideCircle(input[[1]]),torture = T)
shine(profile)
source('~/Documents/ProjectEuler/R Files/Inside circle.R', echo=TRUE)
source('~/Documents/ProjectEuler/R Files/Inside circle.R', echo=TRUE)
test <- "(2.12, -3.48)"
str.split(test, "(")
strsplit(test, "(")
strsplit(test,split = "(")
strsplit(test,split = ",")
?grep
sapply(split[[1]], function (x) gsub(x,"(", ""))
split
source('~/.active-rstudio-document', echo=TRUE)
split
split[[1]]
sapply(split[[1]],cat)
sapply(split[[1]],str)
sapply(split[[1]],length)
gsub(split[[1]][1],"(", "")
gsub(split[[1]][1],")", "")
gsub(pattern = ")",replacement =  "",x = split[[1]][1])
gsub(pattern = "(",replacement =  "",x = split[[1]][1])
gsub(pattern = "\(",replacement =  "",x = split[[1]][1])
gsub(pattern = "/(",replacement =  "",x = split[[1]][1])
gsub(pattern = "*(",replacement =  "",x = split[[1]][1])
gsub(pattern = " ",replacement =  "",x = split[[1]][1])
gsub(pattern = "[[:punct:]]",replacement =  "",x = split[[1]][1])
sapply(split[[1]], function (x) gsub(x,"[[:punct:]]", ""))
sapply(split[[1]], function (x) gsub(x,"[[:punct:]]", ""))
split[[1]]
sapply(split[[1]], function (x) {gsub(x,"[[:punct:]]", "")})
sapply(split[[1]], function (x) {gsub("[[:punct:]]", "",)})
sapply(split[[1]], function (x) {gsub("[[:punct:]]", "",x)})
sapply(split[[1]], function (x) {gsub("[[:punct:]]", "",x)})
sapply(split[[1]], function (x) {as.numeric(gsub("[[:punct:]]", "",x))})
?regex
sapply(split[[1]], function (x) {as.numeric(gsub("[\(\)]", "",x))})
sapply(split[[1]], function (x) {as.numeric(gsub("\(", "",x))})
sapply(split[[1]], function (x) {as.numeric(gsub("(", "",x))})
sapply(split[[1]], function (x) {as.numeric(gsub("[[:punct:]]", "",x))})
sapply(split[[1]], function (x) {as.numeric(gsub("[:punct:]", "",x))})
sapply(split[[1]], function (x) {as.numeric(gsub("[[:punct:]]", "",x))})
sapply(split[[1]], function (x) {as.numeric(gsub("[[\()]]", "",x))})
sapply(split[[1]], function (x) {as.numeric(gsub("(\(\))", "",x))})
sapply(split[[1]], function (x) {as.numeric(gsub("(\\(\\))", "",x))})
sapply(split[[1]], function (x) {as.numeric(gsub("(\(\))", "","()"))})
sapply(split[[1]], function (x) {as.numeric(gsub("(\(\))", "","(sometext"))})
sapply(split[[1]], function (x) {as.numeric(gsub("(\\)", "","(sometext"))})
sapply(split[[1]], function (x) {as.numeric(gsub("(\\()", "","(sometext"))})
sapply(split[[1]], function (x) {as.numeric(gsub("\\(", "","(sometext"))})
gsub("//(","","(sometext")
gsub("\\(","","(sometext")
gsub("(\\()","","(sometext")
gsub("(\\(\\))","","(sometext")
gsub("(\\+\\))","","(sometext")
gsub("(\\(+\\))","","(sometext")
gsub("(\\()","","(sometext")
gsub("(\\()","","(sometext)")
gsub("(\\([]\\))","","(sometext")
gsub("(\\([[]]\\))","","(sometext")
gsub("\\([[]]\\)","","(sometext")
gsub("\\([[]]\\)","","(sometext)")
gsub("\\(\\)","","(sometext)")
gsub("\\(","","(sometext)")
gsub("\\(","",gsub("\\(","","(sometext)"))
gsub("\\)","",gsub("\\(","","(sometext)"))
sapply(split[[1]], function (x) {as.numeric(gsub("\\)","",gsub("\\(","",x)))})
str(sapply(split[[1]], function (x) {as.numeric(gsub("\\)","",gsub("\\(","",x)))}))
test <- "(2.12, -3.48)"
sapply(unlist(strsplit(test,split = ",")), function (x) {as.numeric(gsub("\\)","",gsub("\\(","",x)))})
source('~/Documents/ProjectEuler/R Files/Inside circle.R', echo=TRUE)
source('~/Documents/ProjectEuler/R Files/Inside circle.R', echo=TRUE)
source('~/Documents/ProjectEuler/R Files/Inside circle.R', echo=TRUE)
source('~/Documents/ProjectEuler/R Files/Inside circle.R', echo=TRUE)
source('~/Documents/ProjectEuler/R Files/Inside circle.R', echo=TRUE)
source('~/Documents/ProjectEuler/R Files/Inside circle.R', echo=TRUE)
source('~/Documents/ProjectEuler/R Files/Inside circle.R', echo=TRUE)
source('~/Documents/ProjectEuler/R Files/Inside circle.R', echo=TRUE)
getCordinates <- function(string.input) {
sapply(unlist(strsplit(string.input,";")),
function (x) {strsplit(gsub(x = gsub(x = x,pattern = "\\(",replacement = ""),pattern = "\\)",replacement = ""),",")})
}
getCordinates(inputs[[1]])
getCordinates <- function(string.input) {
sapply(unlist(strsplit(string.input,"\\;")),
function (x) {strsplit(gsub(x = gsub(x = x,pattern = "\\(",replacement = ""),pattern = "\\)",replacement = ""),",")})
}
getCordinates <- function(string.input) {
sapply(unlist(strsplit(string.input,"\\;")),
function (x) {strsplit(gsub(x = gsub(x = x,pattern = "\\(",replacement = ""),pattern = "\\)",replacement = ""),",")})
}
getCordinates(inputs[[1]])
inputs[[1]]
Q
inputs <- list("(1,2,3);(2,4,6);(4,5,5);(7,3,11);(9,2,14);(13,7,15);(14,3,17)",
"(2,22,3);(6,12,10);(15,6,21)",
"(1,2,6);(9,23,22);(22,6,24);(8,14,19);(23,12,30)")
getCordinates <- function(string.input) {
sapply(unlist(strsplit(string.input,"\\;")),
function (x) {strsplit(gsub(x = gsub(x = x,pattern = "\\(",replacement = ""),pattern = "\\)",replacement = ""),",")})
}
getCordinates(inputs[[1]])
getCordinates <- function(string.input) {
sapply(unlist(strsplit(string.input,"\\;")),
function (x) {lapply(strsplit(gsub(x = gsub(x = x,pattern = "\\(",replacement = ""),pattern = "\\)",replacement = ""),",")
,as.numeric)})
}
getCordinates(inputs[[1]])
getCordinates(inputs[[1]])[[1]]
stringToDataFrame <- function(integers) {
data.frame(index = integers[1]:integers[3], height = integers[2])
}
stringToDataFrame(getCordinates(inputs[[1]])[[1]])
getCordinates <- function(string.input) {
lapply(sapply(unlist(strsplit(string.input,"\\;")),
function (x) {lapply(strsplit(gsub(x = gsub(x = x,pattern = "\\(",replacement = ""),pattern = "\\)",replacement = ""),",")
,as.numeric)}),
stringToDataFrame)
}
getCordinates(inputs[[1]])
getCordinates <- function(string.input) {
do.call(args = lapply(sapply(unlist(strsplit(string.input,"\\;")),
function (x) {lapply(strsplit(gsub(x = gsub(x = x,pattern = "\\(",replacement = ""),pattern = "\\)",replacement = ""),",")
,as.numeric)}),
stringToDataFrame), what = rbind)
}
getCordinates(inputs[[1]])
createOutput <- function(cleaned.data) {
start <- min(cleaned.data[,1])
range <- start:max(cleaned.data[,2])
output <- ""
for(i in range) {paste0(output,
ifelse(i == start,yes = "",no = " "),
max(cleaned.data[which(cleaned.data[,1] == i),2])}
output
}
createOutput <- function(cleaned.data) {
start <- min(cleaned.data[,1])
range <- start:max(cleaned.data[,2])
output <- ""
for(i in range) {paste0(output,
ifelse(i == start,yes = "",no = " "),
max(cleaned.data[which(cleaned.data[,1] == i),2]))}
output
}
getCordinates(inputs[[1]])
createOutput(getCordinates(inputs[[1]]))
str(getCordinates(inputs[[1]]))
createOutput <- function(cleaned.data) {
start <- min(cleaned.data[,1])
range <- start:max(cleaned.data[,2])
cat(range)
output <- ""
for(i in range) {paste0(output,
ifelse(i == start,yes = "",no = " "),
max(cleaned.data[which(cleaned.data[,1] == i),2]))}
output
}
createOutput(getCordinates(inputs[[1]]))
createOutput <- function(cleaned.data) {
start <- min(cleaned.data[,1])
range <- start:max(cleaned.data[,2])
cat(range)
output <- ""
for(i in range) {
print(i)
paste0(output,
ifelse(i == start,yes = "",no = " "),
max(cleaned.data[which(cleaned.data[,1] == i),2]))}
output
}
createOutput(getCordinates(inputs[[1]]))
createOutput <- function(cleaned.data) {
start <- min(cleaned.data[,1])
range <- start:max(cleaned.data[,2])
cat(range)
output <- ""
for(i in range) {
print(i)
output <- paste0(output,
ifelse(i == start,yes = "",no = " "),
max(cleaned.data[which(cleaned.data[,1] == i),2]))}
output
}
createOutput(getCordinates(inputs[[1]]))
getCordinates(inputs[[1]])
getCordinates(inputs[[1]])[,1]
max(getCordinates(inputs[[1]])[,1])
min(getCordinates(inputs[[1]])[,1])
createOutput <- function(cleaned.data) {
start <- min(cleaned.data[,1])
range <- start:max(cleaned.data[,1])
cat(range)
output <- ""
for(i in range) {
print(i)
output <- paste0(output,
ifelse(i == start,yes = "",no = " "),
max(cleaned.data[which(cleaned.data[,1] == i),2]))}
output
}
createOutput(getCordinates(inputs[[1]]))
createOutput <- function(cleaned.data) {
start <- min(cleaned.data[,1])
range <- start:max(cleaned.data[,1])
output <- ""
for(i in range) {
output <- paste0(output,
ifelse(i == start,yes = "",no = " "),
max(cleaned.data[which(cleaned.data[,1] == i),2]))}
output
}
createOutput(getCordinates(inputs[[1]]))
strsplit(createOutput(getCordinates(inputs[[1]]))," ")
as.numeric(strsplit(createOutput(getCordinates(inputs[[1]]))," ")[[1]])
plot(1:17,as.numeric(strsplit(createOutput(getCordinates(inputs[[1]]))," ")[[1]])))
length(as.numeric(strsplit(createOutput(getCordinates(inputs[[1]]))," ")[[1]]))
plot(1:16,as.numeric(strsplit(createOutput(getCordinates(inputs[[1]]))," ")[[1]])))
plot(1:16,as.numeric(strsplit(createOutput(getCordinates(inputs[[1]]))," ")[[1]]))
plot(1:17,as.numeric(strsplit(createOutput(getCordinates(inputs[[1]]))," ")[[1]]))
plot(1:17,as.numeric(strsplit(createOutput(getCordinates(inputs[[1]]))," ")[[1]]),type = "l")
plot(1:17,as.numeric(strsplit(createOutput(getCordinates(inputs[[1]]))," ")[[1]]),type = "b")
plot(1:17,as.numeric(strsplit(createOutput(getCordinates(inputs[[1]]))," ")[[1]]),type = "c")
plot(1:17,as.numeric(strsplit(createOutput(getCordinates(inputs[[1]]))," ")[[1]]))
output <- createOutput(getCordinates(inputs[[1]]))
plot(1:length(output),as.numeric(strsplit(output," ")[[1]]))
length(output)
createOutput(getCordinates(inputs[[1]]))
output
length(output)
?length
plot(1:17,as.numeric(strsplit(output," ")[[1]]))
createOutput <- function(cleaned.data) {
start <- min(cleaned.data[,1])
range <- start:max(cleaned.data[,1])
output <- c()
for(i in range) {output[length(output) + 1] <- max(cleaned.data[which(cleaned.data[,1] == i),2])}
output
}
output <-
createOutput(getCordinates(inputs[[1]]))
diff(createOutput(getCordinates(inputs[[1]])))
diff(c(0,createOutput(getCordinates(inputs[[1]]))))
diff(c(0,createOutput(getCordinates(inputs[[1]])))) != 0
1:17[diff(c(0,createOutput(getCordinates(inputs[[1]])))) != 0]
1:17[diff(c(createOutput(getCordinates(inputs[[1]])))) != 0]
diff(c(0,createOutput(getCordinates(inputs[[1]])))) != 0
length(diff(c(0,createOutput(getCordinates(inputs[[1]])))) != 0)
diff(c(0,createOutput(getCordinates(inputs[[1]])))) != 0
(1:17)[diff(c(0,createOutput(getCordinates(inputs[[1]])))) != 0]
diff(c(0,createOutput(getCordinates(inputs[[1]]))))
?diff
output <- createOutput(getCordinates(inputs[[1]]))
(1:17)[diff(c(0,output)) != 0 || diff(c(0,output), lag = 2) != 0]
first.diff <- diff(c(0,output))
diff(first.diff)
first.diff
first.diff <- diff(c(0,output))!=0
first.diff
diff((1:17)[first.diff])
diff((1:17)[first.diff]) == 1
output
createOutput <- function(cleaned.data) {
start <- min(cleaned.data[,1])
range <- start:max(cleaned.data[,1])
output <- c()
for(i in range) {output[length(output) + 1] <- max(cleaned.data[which(cleaned.data[,1] == i),2])}
data.frame(length = range, height = output)
}
output <- createOutput(getCordinates(inputs[[1]]))
output
createOutput <- function(cleaned.data) {
start <- min(cleaned.data[,1])
range <- start:max(cleaned.data[,1])
output <- c()
for(i in range) {output[length(output) + 1] <- max(cleaned.data[which(cleaned.data[,1] == i),2])}
data.frame(length = range, height = output, difference = diff(output))
}
output <- createOutput(getCordinates(inputs[[1]]))
output
createOutput <- function(cleaned.data) {
start <- min(cleaned.data[,1])
range <- start:max(cleaned.data[,1])
output <- c()
for(i in range) {output[length(output) + 1] <- max(cleaned.data[which(cleaned.data[,1] == i),2])}
data.frame(length = range, height = output, difference = c(0,diff(output)))
}
output <- createOutput(getCordinates(inputs[[1]]))
output
createOutput <- function(cleaned.data) {
start <- min(cleaned.data[,1])
range <- start:max(cleaned.data[,1])
output <- c()
for(i in range) {output[length(output) + 1] <- max(cleaned.data[which(cleaned.data[,1] == i),2])}
data.frame(length = range, height = output, changed = c(0,diff(output)) != 0)
}
output <- createOutput(getCordinates(inputs[[1]]))
createOutput <- function(cleaned.data) {
start <- min(cleaned.data[,1])
range <- start:max(cleaned.data[,1])
output <- c()
for(i in range) {output[length(output) + 1] <- max(cleaned.data[which(cleaned.data[,1] == i),2])}
data.frame(length = range, height = output, changed = c(0,diff(output)) != 0)
}
output <- createOutput(getCordinates(inputs[[1]]))
output
output[output[,3],1]
diff(output[output[,3],1])
library(lubridate)
library(forecast)
library(plyr)
seq(as.POSIXct("1970-01-01"))
seq(as.POSIXct("1970-01-01"),as.POSIXct("1971-01-01"),"year")
table(seq(as.POSIXct("1970-01-01"),as.POSIXct("1971-01-01"),"year"))
max(table(seq(as.POSIXct("1970-01-01"),as.POSIXct("1971-01-01"),"year")))
?rbind.fill
